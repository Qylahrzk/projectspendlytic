import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'package:easy_localization/easy_localization.dart';

import 'firebase_options.dart';              // Firebase configuration options
import 'services/db_service.dart';           // Local SQLite DB service
import 'providers/theme_notifier.dart';      // Theme management provider
import 'screens/settings/settings_screen.dart';
import 'screens/account/account_screen.dart';
import 'widgets/auth_layout.dart';           // Entry point widget for login/logic handling

void main() async {
  // Ensure Flutter widget binding is initialized before Firebase/DB init
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize EasyLocalization for multi-language support
  await EasyLocalization.ensureInitialized();

  try {
    // Initialize Firebase using config generated by FlutterFire CLI
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );

    // Initialize SQLite database via your DBService singleton
    await DBService().database;

  } catch (e) {
    // Log or handle initialization errors
    debugPrint("Initialization error: $e");
    // Optionally show an error screen here if initialization fails
  }

  // Run the main app widget wrapped in EasyLocalization and Provider
  runApp(
    EasyLocalization(
      supportedLocales: const [Locale('en'), Locale('ms'), Locale('zh')],
      path: 'assets/lang',                // Path to your translation files
      fallbackLocale: const Locale('en'),
      child: ChangeNotifierProvider(
        create: (_) => ThemeNotifier(),
        child: const SpendlyticApp(),
      ),
    ),
  );
}

class SpendlyticApp extends StatelessWidget {
  const SpendlyticApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeNotifier>(
      builder: (context, themeNotifier, _) {
        return MaterialApp(
          title: 'Spendlytic',
          debugShowCheckedModeBanner: false,

          // Listen for theme toggle (light/dark)
          themeMode: themeNotifier.currentTheme,

          // Light theme
          theme: ThemeData(
            brightness: Brightness.light,
            fontFamily: 'Roboto',
            scaffoldBackgroundColor: const Color(0xFFF5F4FA),
            colorScheme: const ColorScheme.light(
              primary: Color.fromARGB(255, 188, 147, 255),
              secondary: Color.fromARGB(255, 217, 191, 250),
              surface: Colors.white,
              onPrimary: Colors.black,
              onSurface: Color(0xFF333333),
            ),
          ),

          // Dark theme
          darkTheme: ThemeData(
            brightness: Brightness.dark,
            fontFamily: 'Roboto',
            scaffoldBackgroundColor: const Color(0xFF121212),
            colorScheme: const ColorScheme.dark(
              primary: Color(0xFFBF00FF),
              secondary: Color.fromARGB(255, 196, 48, 255),
              surface: Color(0xFF1E1E1E),
              onPrimary: Colors.white,
              onSurface: Colors.white,
            ),
          ),

          // Localization support
          locale: context.locale,
          supportedLocales: context.supportedLocales,
          localizationsDelegates: context.localizationDelegates,

          // Additional named routes if needed
          routes: {
            '/settings': (context) => const SettingsScreen(),
            '/account_settings': (context) => const AccountScreen(),
          },

          // AuthLayout handles login, session check, and main app navigation
          home: const AuthLayout(),
        );
      },
    );
  }
}
